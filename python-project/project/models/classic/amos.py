# coding: utf-8
# autogenerated from sqlagen
from sqlalchemy import (
    Boolean,
    CHAR,
    Column,
    Date,
    DateTime,
    Enum,
    Integer,
    MetaData,
    SmallInteger,
    Table,
)
from sqlalchemy import event, DDL
from sqlalchemy.dialects.postgresql import INTERVAL, UUID
from sqlalchemy.orm import mapper
from project.models.data import amos


metadata = MetaData()


# https://stackoverflow.com/a/22212214/5819113
event.listen(
    metadata, "before_create", DDL('CREATE SCHEMA IF NOT EXISTS "AMOS"'),
)

event.listen(
    metadata, "after_drop", DDL('DROP SCHEMA IF EXISTS "AMOS" CASCADE'),
)


t_attachments = Table(
    "attachments",
    metadata,
    Column('rowid', Integer, primary_key=True), # needed by the ORM
    Column("file", UUID),
    Column("event", CHAR(30), nullable=False),
    schema="AMOS",
)


t_forecastedorders = Table(
    "forecastedorders",
    metadata,
    Column('rowid', Integer, primary_key=True), # needed by the ORM
    Column("workorderid", Integer),
    Column("aircraftregistration", CHAR(6), nullable=False),
    Column("executiondate", Date),
    Column("executionplace", CHAR(3)),
    Column("workpackage", Integer),
    Column(
        "kind",
        Enum("Forecast", "TechnicalLogBook", name="workorderkind"),
        nullable=False,
    ),
    Column("deadline", Date, nullable=False),
    Column("planned", Date, nullable=False),
    Column("frequency", SmallInteger, nullable=False),
    Column(
        "frequencyunits",
        Enum("Flights", "Days", "Miles", name="frequencyunitskind"),
        nullable=False,
    ),
    Column("forecastedmanhours", SmallInteger, nullable=False),
    schema="AMOS",
)


t_maintenanceevents = Table(
    "maintenanceevents",
    metadata,
    Column('rowid', Integer, primary_key=True), # needed by the ORM
    Column("maintenanceid", CHAR(30)),
    Column("aircraftregistration", CHAR(6), nullable=False),
    Column("airport", CHAR(3)),
    Column("subsystem", CHAR(4)),
    Column("starttime", DateTime),
    Column("duration", INTERVAL),
    Column(
        "kind",
        Enum(
            "Delay",
            "Safety",
            "AircraftOnGround",
            "Maintenance",
            "Revision",
            name="maintenanceeventkind",
        ),
        nullable=False,
    ),
    schema="AMOS",
)


t_operationinterruption = Table(
    "operationinterruption",
    metadata,
    Column('rowid', Integer, primary_key=True), # needed by the ORM
    Column("maintenanceid", CHAR(30)),
    Column("aircraftregistration", CHAR(6), nullable=False),
    Column("airport", CHAR(3)),
    Column("subsystem", CHAR(4)),
    Column("starttime", DateTime),
    Column("duration", INTERVAL),
    Column(
        "kind",
        Enum(
            "Delay",
            "Safety",
            "AircraftOnGround",
            "Maintenance",
            "Revision",
            name="maintenanceeventkind",
        ),
        nullable=False,
    ),
    Column("flightid", CHAR(22), nullable=False),
    Column("departure", Date, nullable=False),
    Column("delaycode", CHAR(2)),
    schema="AMOS",
)


t_technicallogbookorders = Table(
    "technicallogbookorders",
    metadata,
    Column('rowid', Integer, primary_key=True), # needed by the ORM
    Column("workorderid", Integer),
    Column("aircraftregistration", CHAR(6), nullable=False),
    Column("executiondate", Date),
    Column("executionplace", CHAR(3)),
    Column("workpackage", Integer),
    Column(
        "kind",
        Enum("Forecast", "TechnicalLogBook", name="workorderkind"),
        nullable=False,
    ),
    Column(
        "reporteurclass",
        Enum("PIREP", "MAREP", name="reportkind"),
        nullable=False,
    ),
    Column("reporteurid", SmallInteger, nullable=False),
    Column("reportingdate", Date, nullable=False),
    Column("due", Date),
    Column("deferred", Boolean),
    Column("mel", Enum("A", "B", "C", "D", name="melcathegory")),
    schema="AMOS",
)


t_workorders = Table(
    "workorders",
    metadata,
    Column('rowid', Integer, primary_key=True), # needed by the ORM
    Column("workorderid", Integer),
    Column("aircraftregistration", CHAR(6), nullable=False),
    Column("executiondate", Date),
    Column("executionplace", CHAR(3)),
    Column("workpackage", Integer),
    Column(
        "kind",
        Enum("Forecast", "TechnicalLogBook", name="workorderkind"),
        nullable=False,
    ),
    schema="AMOS",
)


t_workpackages = Table(
    "workpackages",
    metadata,
    Column('rowid', Integer, primary_key=True), # needed by the ORM
    Column("workpackageid", Integer),
    Column("executiondate", Date),
    Column("executionplace", CHAR(3)),
    schema="AMOS",
)

# ---------------------------------------------------------------------------- #
#                                   mappings                                   #
# ---------------------------------------------------------------------------- #

# see https://docs.sqlalchemy.org/en/13/orm/mapping_styles.html#classical-mappings


t_attachments_mapping = mapper(amos.Attachment, t_attachments)
t_forecastedorders_mapping = mapper(amos.ForecastedOrder, t_forecastedorders)
t_maintenanceevents_mapping = mapper(
    amos.MaintenanceEvent, t_maintenanceevents
)
t_operationinterruption_mapping = mapper(
    amos.OperationalInterruption, t_operationinterruption
)
t_technicallogbookorders_mapping = mapper(
    amos.TechnicalLogbookOrder, t_technicallogbookorders
)
t_workorders_mapping = mapper(amos.WorkOrder, t_workorders)
t_workpackages_mapping = mapper(amos.Workpackage, t_workpackages)
